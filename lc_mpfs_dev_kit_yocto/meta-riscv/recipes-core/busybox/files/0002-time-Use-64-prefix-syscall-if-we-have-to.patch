From b18253c4fe09f80906ac996c148035d8731cef60 Mon Sep 17 00:00:00 2001
From: Alistair Francis <alistair.francis@wdc.com>
Date: Tue, 27 Aug 2019 17:15:09 -0700
Subject: [PATCH 2/3] time: Use 64 prefix syscall if we have to

Some 32-bit architectures no longer have the 32-bit time_t syscalls.
Instead they have suffixed syscalls that returns a 64-bit time_t. If
the architecture doesn't have the non-suffixed syscall and is using a
64-bit time_t let's use the suffixed syscall instead.

This fixes build issues when building for RISC-V 32-bit with 5.1+ kernel
headers.

If an architecture only supports the suffixed syscalls, but is still
using a 32-bit time_t report a compilation error. This avoids us have to
deal with converting between 64-bit and 32-bit values. There are
currently no architectures where this is the case.

Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
Upstream-Status: Submitted
---
 libbb/time.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/libbb/time.c b/libbb/time.c
index cab0ad602..b6fcae28b 100644
--- a/libbb/time.c
+++ b/libbb/time.c
@@ -257,7 +257,14 @@ char* FAST_FUNC strftime_YYYYMMDDHHMMSS(char *buf, unsigned len, time_t *tp)
  * typically requiring -lrt. We just skip all this mess */
 static void get_mono(struct timespec *ts)
 {
+#if defined(__NR_clock_gettime)
 	if (syscall(__NR_clock_gettime, CLOCK_MONOTONIC, ts))
+#elif __TIMESIZE == 64
+	if (syscall(__NR_clock_gettime64, CLOCK_MONOTONIC, ts))
+#else
+# error "We currently don't support architectures without " \
+	"the __NR_clock_gettime syscall and 32-bit time_t"
+#endif
 		bb_error_msg_and_die("clock_gettime(MONOTONIC) failed");
 }
 unsigned long long FAST_FUNC monotonic_ns(void)
-- 
2.22.0

